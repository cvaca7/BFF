
/**
 * Schema collection for reverse geolocation information
 * @class LocationInfo
 @property {Number} latitude e.g. 30.235249
 @property {Number} longitude e.g. -97.763262
 @property {String} country e.g. "United States"
 @property {String} city e.g. "Austin"
 @property {String} state e.g. "Texas"
 @property {String} stateCode e.g. "TX"
 @property {String} zipcode e.g. "78704"
 @property {String} streetName e.g. "Powell Circle"
 @property {String} streetNumber e.g. "514"
 @property {String} countryCode e.g. "US"
 * @example locationInfo =
 * (
 {
city = "New York";
country = "United States";
countryCode = US;
latitude = 40.7589248;
longitude = -73.98526559999999;
state = "New York";
stateCode = NY;
streetName = Broadway;
streetNumber = "1560-1568";
zipcode = 10036;
}
 );

 @memberof Model-Objects
 */

/*

 */

LocationInfo = new SimpleSchema ({

    latitude: {
        type: Number,
        decimal:true,
        optional: true
    },
    longitude: {
        type: Number,
        decimal:true,
        optional: true
    },
    country: {
        type: String,
        optional: true
    },
    city: {
        type: String,
        optional: true
    },
    state: {
        type: String,
        optional: true
    },
    stateCode: {
        type: String,
        optional: true
    },
    zipcode: {
        type: String,
        optional: true
    },
    streetName: {
        type: String,
        optional: true
    },
    streetNumber: {
        type: String,
        optional: true
    },
    countryCode: {
        type: String,
        optional: true
    }

});

/**
 * Represents an Encounter in the app.
 * @class Encounter
 * @property {Date} createDate An autogenerated value indicating the date/time the object was created.
 * @property {Date} lastUpdatedDate Indicate the last update of this Encounter.
 * @property {String} user1Id The id of the user initiating the encounter.
 * @property {String} user2Id The id of the user that accepted the encounter.
 * @property {Number} coordinates2d represents the coordinates between users at the time of the last encounter.
 * @property {Array} locationInfo An array of LocationInfo objects.
 * @property {Boolean} iced Indicate if the Encounter have been iced.
 * @property {Number} numberOfMiss Indicate the number of miss.

 @memberof Model-Objects
 */

Encounter = new Meteor.Collection ('encounter');
var schema = {};
schema.Encounters = new SimpleSchema ({

    createDate: {
        type: Date,
        label: 'createDate',
        defaultValue: new Date (),
        optional: true
    },
    lastUpdatedDate: {
        type: Date,
        defaultValue: new Date (),
        optional: true
    },
    user1Id: {
        type: String,
        label: 'User From'
    },
    user2Id: {
        type: String,
        label: 'User To'
    },
    coordinates2d: {
        label: '2D Coordinates',
        type: [Number],
        decimal: true,
        index: "2d"
    },
    locationInfo: {
        type:[LocationInfo],
        optional: true
    },
    iced: {
        type: Boolean,
        optional: true
    },
    numberOfMiss: {
        type: Number
    }
});

Encounter.attachSchema (schema.Encounters);


/*
 * Add query methods like this:
 *  Encounter.findPublic = function () {
 *    return Encounter.find({is_public: true});
 *  }
 */